// tslint:disable
// eslint-disable
/**
 * PaulExpress API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  DogDto,
  DogDtoFromJSON,
  DogDtoToJSON,
  DogGridDtoPaginatedResults,
  DogGridDtoPaginatedResultsFromJSON,
  DogGridDtoPaginatedResultsToJSON,
  DogSearch,
  DogSearchFromJSON,
  DogSearchToJSON,
  FilterCriteriaInfo,
  FilterCriteriaInfoFromJSON,
  FilterCriteriaInfoToJSON,
  SelectItem,
  SelectItemFromJSON,
  SelectItemToJSON
} from "../models";

export interface DogApiApiDogCriteriaListSearchFieldGetRequest {
  searchField: string;
}

export interface DogApiApiDogCriteriasGetRequest {
  includeListsValues?: boolean;
}

export interface DogApiApiDogDogIdGetRequest {
  dogId: number;
}

export interface DogApiApiDogSavePostRequest {
  DogDto?: DogDto;
}

export interface DogApiApiDogSearchPostRequest {
  DogSearch?: DogSearch;
}

/**
 * no description
 */
export class DogApi extends runtime.BaseAPI {
  /**
   */
  async apiDogCriteriaListSearchFieldGetRaw(
    requestParameters: DogApiApiDogCriteriaListSearchFieldGetRequest
  ): Promise<runtime.ApiResponse<Array<SelectItem>>> {
    if (requestParameters.searchField === null || requestParameters.searchField === undefined) {
      throw new runtime.RequiredError(
        "searchField",
        "Required parameter requestParameters.searchField was null or undefined when calling apiDogCriteriaListSearchFieldGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Dog/criteriaList/{searchField}`.replace(
        `{${"searchField"}}`,
        encodeURIComponent(String(requestParameters.searchField))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SelectItemFromJSON));
  }

  /**
   */
  async apiDogCriteriaListSearchFieldGet(
    requestParameters: DogApiApiDogCriteriaListSearchFieldGetRequest
  ): Promise<Array<SelectItem>> {
    const response = await this.apiDogCriteriaListSearchFieldGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiDogCriteriasGetRaw(
    requestParameters: DogApiApiDogCriteriasGetRequest
  ): Promise<runtime.ApiResponse<Array<FilterCriteriaInfo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.includeListsValues !== undefined) {
      queryParameters["includeListsValues"] = requestParameters.includeListsValues;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Dog/criterias`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(FilterCriteriaInfoFromJSON));
  }

  /**
   */
  async apiDogCriteriasGet(requestParameters: DogApiApiDogCriteriasGetRequest): Promise<Array<FilterCriteriaInfo>> {
    const response = await this.apiDogCriteriasGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiDogDogIdGetRaw(requestParameters: DogApiApiDogDogIdGetRequest): Promise<runtime.ApiResponse<DogDto>> {
    if (requestParameters.dogId === null || requestParameters.dogId === undefined) {
      throw new runtime.RequiredError(
        "dogId",
        "Required parameter requestParameters.dogId was null or undefined when calling apiDogDogIdGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Dog/{dogId}`.replace(`{${"dogId"}}`, encodeURIComponent(String(requestParameters.dogId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => DogDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiDogDogIdGet(requestParameters: DogApiApiDogDogIdGetRequest): Promise<DogDto> {
    const response = await this.apiDogDogIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiDogSavePostRaw(requestParameters: DogApiApiDogSavePostRequest): Promise<runtime.ApiResponse<DogDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Dog/save`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DogDtoToJSON(requestParameters.DogDto)
    });

    return new runtime.JSONApiResponse(response, jsonValue => DogDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiDogSavePost(requestParameters: DogApiApiDogSavePostRequest): Promise<DogDto> {
    const response = await this.apiDogSavePostRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiDogSearchPostRaw(
    requestParameters: DogApiApiDogSearchPostRequest
  ): Promise<runtime.ApiResponse<DogGridDtoPaginatedResults>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Dog/search`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DogSearchToJSON(requestParameters.DogSearch)
    });

    return new runtime.JSONApiResponse(response, jsonValue => DogGridDtoPaginatedResultsFromJSON(jsonValue));
  }

  /**
   */
  async apiDogSearchPost(requestParameters: DogApiApiDogSearchPostRequest): Promise<DogGridDtoPaginatedResults> {
    const response = await this.apiDogSearchPostRaw(requestParameters);
    return await response.value();
  }
}
