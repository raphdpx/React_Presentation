// tslint:disable
// eslint-disable
/**
 * PaulExpress API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  EmployeeDto,
  EmployeeDtoFromJSON,
  EmployeeDtoToJSON,
  EmployeeGridDtoPaginatedResults,
  EmployeeGridDtoPaginatedResultsFromJSON,
  EmployeeGridDtoPaginatedResultsToJSON,
  EmployeeSearch,
  EmployeeSearchFromJSON,
  EmployeeSearchToJSON,
  FilterCriteriaInfo,
  FilterCriteriaInfoFromJSON,
  FilterCriteriaInfoToJSON,
  SelectItem,
  SelectItemFromJSON,
  SelectItemToJSON
} from "../models";

export interface EmployeeApiApiEmployeeCriteriaListSearchFieldGetRequest {
  searchField: string;
}

export interface EmployeeApiApiEmployeeCriteriasGetRequest {
  includeListsValues?: boolean;
}

export interface EmployeeApiApiEmployeeEmployeeIdDeleteRequest {
  employeeId: number;
}

export interface EmployeeApiApiEmployeeEmployeeIdGetRequest {
  employeeId: number;
}

export interface EmployeeApiApiEmployeeSavePostRequest {
  EmployeeDto?: EmployeeDto;
}

export interface EmployeeApiApiEmployeeSearchPostRequest {
  EmployeeSearch?: EmployeeSearch;
}

/**
 * no description
 */
export class EmployeeApi extends runtime.BaseAPI {
  /**
   */
  async apiEmployeeCriteriaListSearchFieldGetRaw(
    requestParameters: EmployeeApiApiEmployeeCriteriaListSearchFieldGetRequest
  ): Promise<runtime.ApiResponse<Array<SelectItem>>> {
    if (requestParameters.searchField === null || requestParameters.searchField === undefined) {
      throw new runtime.RequiredError(
        "searchField",
        "Required parameter requestParameters.searchField was null or undefined when calling apiEmployeeCriteriaListSearchFieldGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/criteriaList/{searchField}`.replace(
        `{${"searchField"}}`,
        encodeURIComponent(String(requestParameters.searchField))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SelectItemFromJSON));
  }

  /**
   */
  async apiEmployeeCriteriaListSearchFieldGet(
    requestParameters: EmployeeApiApiEmployeeCriteriaListSearchFieldGetRequest
  ): Promise<Array<SelectItem>> {
    const response = await this.apiEmployeeCriteriaListSearchFieldGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiEmployeeCriteriasGetRaw(
    requestParameters: EmployeeApiApiEmployeeCriteriasGetRequest
  ): Promise<runtime.ApiResponse<Array<FilterCriteriaInfo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.includeListsValues !== undefined) {
      queryParameters["includeListsValues"] = requestParameters.includeListsValues;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/criterias`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(FilterCriteriaInfoFromJSON));
  }

  /**
   */
  async apiEmployeeCriteriasGet(
    requestParameters: EmployeeApiApiEmployeeCriteriasGetRequest
  ): Promise<Array<FilterCriteriaInfo>> {
    const response = await this.apiEmployeeCriteriasGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiEmployeeEmployeeIdDeleteRaw(
    requestParameters: EmployeeApiApiEmployeeEmployeeIdDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
      throw new runtime.RequiredError(
        "employeeId",
        "Required parameter requestParameters.employeeId was null or undefined when calling apiEmployeeEmployeeIdDelete."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/{employeeId}`.replace(
        `{${"employeeId"}}`,
        encodeURIComponent(String(requestParameters.employeeId))
      ),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiEmployeeEmployeeIdDelete(requestParameters: EmployeeApiApiEmployeeEmployeeIdDeleteRequest): Promise<void> {
    await this.apiEmployeeEmployeeIdDeleteRaw(requestParameters);
  }

  /**
   */
  async apiEmployeeEmployeeIdGetRaw(
    requestParameters: EmployeeApiApiEmployeeEmployeeIdGetRequest
  ): Promise<runtime.ApiResponse<EmployeeDto>> {
    if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
      throw new runtime.RequiredError(
        "employeeId",
        "Required parameter requestParameters.employeeId was null or undefined when calling apiEmployeeEmployeeIdGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/{employeeId}`.replace(
        `{${"employeeId"}}`,
        encodeURIComponent(String(requestParameters.employeeId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => EmployeeDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiEmployeeEmployeeIdGet(requestParameters: EmployeeApiApiEmployeeEmployeeIdGetRequest): Promise<EmployeeDto> {
    const response = await this.apiEmployeeEmployeeIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiEmployeeSavePostRaw(
    requestParameters: EmployeeApiApiEmployeeSavePostRequest
  ): Promise<runtime.ApiResponse<EmployeeDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/save`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EmployeeDtoToJSON(requestParameters.EmployeeDto)
    });

    return new runtime.JSONApiResponse(response, jsonValue => EmployeeDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiEmployeeSavePost(requestParameters: EmployeeApiApiEmployeeSavePostRequest): Promise<EmployeeDto> {
    const response = await this.apiEmployeeSavePostRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiEmployeeSearchPostRaw(
    requestParameters: EmployeeApiApiEmployeeSearchPostRequest
  ): Promise<runtime.ApiResponse<EmployeeGridDtoPaginatedResults>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Employee/search`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EmployeeSearchToJSON(requestParameters.EmployeeSearch)
    });

    return new runtime.JSONApiResponse(response, jsonValue => EmployeeGridDtoPaginatedResultsFromJSON(jsonValue));
  }

  /**
   */
  async apiEmployeeSearchPost(
    requestParameters: EmployeeApiApiEmployeeSearchPostRequest
  ): Promise<EmployeeGridDtoPaginatedResults> {
    const response = await this.apiEmployeeSearchPostRaw(requestParameters);
    return await response.value();
  }
}
