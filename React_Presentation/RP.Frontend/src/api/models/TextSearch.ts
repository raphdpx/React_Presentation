// tslint:disable
// eslint-disable
/**
 * PaulExpress API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ECriteriaType,
  ECriteriaTypeFromJSON,
  ECriteriaTypeFromJSONTyped,
  ECriteriaTypeToJSON,
  ETextSearchType,
  ETextSearchTypeFromJSON,
  ETextSearchTypeFromJSONTyped,
  ETextSearchTypeToJSON
} from "./";

/**
 *
 * @export
 * @interface TextSearch
 */
export interface TextSearch {
  /**
   *
   * @type {ECriteriaType}
   * @memberof TextSearch
   */
  typeOfCriteria?: ECriteriaType;
  /**
   *
   * @type {ETextSearchType}
   * @memberof TextSearch
   */
  searchMode?: ETextSearchType;
  /**
   *
   * @type {string}
   * @memberof TextSearch
   */
  value?: string | null;
  /**
   *
   * @type {string}
   * @memberof TextSearch
   */
  secondaryValue?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof TextSearch
   */
  readonly availableSearchTypes?: Array<string> | null;
  /**
   *
   * @type {string}
   * @memberof TextSearch
   */
  readonly currentSearchType?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TextSearch
   */
  manualSearch?: boolean;
}

export function TextSearchFromJSON(json: any): TextSearch {
  return TextSearchFromJSONTyped(json, false);
}

export function TextSearchFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextSearch {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    typeOfCriteria: !exists(json, "typeOfCriteria") ? undefined : ECriteriaTypeFromJSON(json["typeOfCriteria"]),
    searchMode: !exists(json, "searchMode") ? undefined : ETextSearchTypeFromJSON(json["searchMode"]),
    value: !exists(json, "value") ? undefined : json["value"],
    secondaryValue: !exists(json, "secondaryValue") ? undefined : json["secondaryValue"],
    availableSearchTypes: !exists(json, "availableSearchTypes") ? undefined : json["availableSearchTypes"],
    currentSearchType: !exists(json, "currentSearchType") ? undefined : json["currentSearchType"],
    manualSearch: !exists(json, "manualSearch") ? undefined : json["manualSearch"]
  };
}

export function TextSearchToJSON(value?: TextSearch | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    typeOfCriteria: ECriteriaTypeToJSON(value.typeOfCriteria),
    searchMode: ETextSearchTypeToJSON(value.searchMode),
    value: value.value,
    secondaryValue: value.secondaryValue,
    manualSearch: value.manualSearch
  };
}
